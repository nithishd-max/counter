{"version":3,"sources":["App.js","index.js"],"names":["Timer","state","isActive","secondsElapsed","startTime","setState","countdown","setInterval","resetTime","clearInterval","pauseTime","Math","floor","this","slice","className","getHours","getMinutes","getSeconds","onClick","React","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"sMAEqBA,E,4MACnBC,MAAQ,CACNC,UAAU,EACVC,eAAgB,G,EAiBlBC,UAAY,WACV,EAAKC,SAAS,CAAEH,UAAU,IAE1B,EAAKI,UAAYC,aAAY,WAC3B,EAAKF,UAAS,kBAAyB,CACrCF,eADY,EAAGA,eACkB,QAElC,M,EAGLK,UAAY,WACVC,cAAc,EAAKH,WACnB,EAAKD,SAAS,CACZF,eAAgB,EAChBD,UAAU,K,EAIdQ,UAAY,WACVD,cAAc,EAAKH,WACnB,EAAKD,SAAS,CAAEH,UAAU,K,yDAjC1B,OAAQ,IAAMS,KAAKC,MAAMC,KAAKZ,MAAME,eAAiB,OAAOW,OAAO,K,mCAInE,OAAQ,IAAMH,KAAKC,MAAOC,KAAKZ,MAAME,eAAiB,KAAQ,KAAKW,OAChE,K,mCAKH,OAAQ,IAAOD,KAAKZ,MAAME,eAAiB,IAAKW,OAAO,K,+BA2BvD,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,uBAAMA,UAAU,aAAhB,cAA+BF,KAAKG,cACpC,uBAAMD,UAAU,aAAhB,eAAgCF,KAAKI,gBACrC,uBAAMF,UAAU,aAAhB,eAAgCF,KAAKK,mBAEvC,gCACE,wBACEH,UAAU,qBACVI,QAASN,KAAKZ,MAAMC,SAAWW,KAAKH,UAAYG,KAAKT,UAFvD,yBAMA,wBAAQW,UAAU,qBAAqBI,QAASN,KAAKL,UAArD,6B,GA1DyBY,IAAMC,W,MCIzC,SAASrB,IACP,OACE,qBAAKe,UAAU,MAAf,SACE,cAAC,EAAD,MAKN,IAAMO,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAAWJ,K","file":"static/js/main.23e23033.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class Timer extends React.Component {\n  state = {\n    isActive: false,\n    secondsElapsed: 0 / 1000 //time in seconds\n  };\n\n  getHours() {\n    return (\"0\" + Math.floor(this.state.secondsElapsed / 3600)).slice(-2);\n  }\n\n  getMinutes() {\n    return (\"0\" + Math.floor((this.state.secondsElapsed % 3600) / 60)).slice(\n      -2\n    );\n  }\n\n  getSeconds() {\n    return (\"0\" + (this.state.secondsElapsed % 60)).slice(-2);\n  }\n\n  startTime = () => {\n    this.setState({ isActive: true });\n\n    this.countdown = setInterval(() => {\n      this.setState(({ secondsElapsed }) => ({\n        secondsElapsed: secondsElapsed + 1\n      }));\n    }, 1000);\n  };\n\n  resetTime = () => {\n    clearInterval(this.countdown);\n    this.setState({\n      secondsElapsed: 0 / 1000,\n      isActive: false\n    });\n  };\n\n  pauseTime = () => {\n    clearInterval(this.countdown);\n    this.setState({ isActive: false });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Timer-container\">\n          <span className=\"Bloc-timer\"> {this.getHours()}</span>\n          <span className=\"Bloc-timer\"> :{this.getMinutes()}</span>\n          <span className=\"Bloc-timer\"> :{this.getSeconds()}</span>\n        </div>\n        <div>\n          <button\n            className=\"Button StartButton\"\n            onClick={this.state.isActive ? this.pauseTime : this.startTime}\n          >\n            Start/Pause\n          </button>\n          <button className=\"Button PauseButton\" onClick={this.resetTime}>\n            Reset\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./App.css\";\n\nfunction Timer() {\n  return (\n    <div className=\"App\">\n      <App />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Timer />, rootElement);\n"],"sourceRoot":""}